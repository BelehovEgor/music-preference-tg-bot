import telebot
from telebot import types

import config
import service

START = "start"
MENU = "menu"
TRACKS = "tracks"
PLAYLISTS = "playlists"
HELP = "help"
ADD_TRACK = "add_track"
GET_TRACKS_LIST = "get_tracks_list"


def create_tracks_menu(user_id, resend):
    page_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É"
    message_id = service.get_bot_message_id(user_id)

    # –°–æ–∑–¥–∞–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = types.InlineKeyboardMarkup()
    add_track = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫", callback_data=ADD_TRACK)
    get_tracks_list = types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤", callback_data=GET_TRACKS_LIST)
    keyboard.add(add_track)
    keyboard.add(get_tracks_list)

    if resend:
        message = bot.send_message(chat_id=user_id, text=page_text, reply_markup=keyboard, parse_mode='html')
        service.set_bot_message_id(user_id, message.id)
    else:
        # –ë–æ—Ç –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        bot.edit_message_text(chat_id=user_id, text=page_text,
                              message_id=message_id,
                              reply_markup=keyboard, parse_mode='html')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
def create_menu_page(user_id):
    # –¢–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    menu_text = "\n\nüëá –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ üëá"

    # –£–¥–∞–ª—è–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Å—Ç–∞–ª–∞—Å—å
    message_id = service.get_bot_message_id(user_id)
    if message_id is not None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å –∏ –Ω–µ –Ω–∞–¥–æ
        try:
            bot.delete_message(chat_id=user_id, message_id=message_id)
        except Exception as e:
            print(repr(e))

    # –°–æ–∑–¥–∞–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    markup = types.InlineKeyboardMarkup(row_width=2)
    package = types.InlineKeyboardButton("–¢—Ä–µ–∫–∏", callback_data=TRACKS)
    catalog = types.InlineKeyboardButton("–ü–ª–µ–π–ª–∏—Å—Ç—ã", callback_data=PLAYLISTS)
    help_item = types.InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data=HELP)
    markup.add(package)
    markup.add(catalog)
    markup.add(help_item)

    # –î–æ–±–∞–≤–ª—è–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    message = bot.send_message(user_id, menu_text, parse_mode='html', reply_markup=markup)
    service.set_bot_message_id(user_id, message.id)


if __name__ == '__main__':
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —Ç–µ–ª–µ–≥—Ä–∞–º —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    bot = telebot.TeleBot(config.TOKEN)


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /menu
    @bot.message_handler(commands=[START, MENU])
    def start(message) -> None:
        user_id = message.from_user.id

        # –û—Ç—Å—ã–ª–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        create_menu_page(user_id)


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    @bot.message_handler(commands=[HELP])
    def handle_start(message):
        user_id = message.from_user.id


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
    @bot.callback_query_handler(func=lambda call: True)
    def callback_handler(call):
        try:
            if call.message:
                user_id = call.from_user.id

                if call.data == TRACKS:
                    create_tracks_menu(user_id, False)

                elif call.data == PLAYLISTS:
                    # –û–±–Ω–æ–≤–∏–º –ø–æ–ª–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    xx = 0

                elif call.data == ADD_TRACK:
                    service.start_song_draft(user_id)

                    # –£–¥–∞–ª—è–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Å—Ç–∞–ª–∞—Å—å
                    message_id = service.get_bot_message_id(user_id)
                    if message_id is not None:
                        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å –∏ –Ω–µ –Ω–∞–¥–æ
                        try:
                            bot.delete_message(chat_id=user_id, message_id=message_id)
                        except Exception as e:
                            print(repr(e))

                    text = "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É"
                    bot.send_message(user_id, text, parse_mode='html')

                elif call.data == GET_TRACKS_LIST:
                    xx = 0

                else:
                    xx = 0

        except Exception as e:
            print(repr(e))


    # TODO - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    @bot.message_handler(content_types=['text'])
    def message_from_bot(message):
        if message.chat.type == "private":
            user_id = message.from_user.id

            try:
                if service.is_user_starting_draft(user_id):
                    song_link, song_performer, song_name = service.get_user_song_draft(user_id)
                    if song_link is None:
                        service.set_draft_song_link(user_id, message.text)
                        text = "–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞"
                        bot.send_message(user_id, text, parse_mode='html')
                    elif song_performer is None:
                        service.set_draft_song_performer(user_id, message.text)
                        text = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç—Ä–µ–∫–∞"
                        bot.send_message(user_id, text, parse_mode='html')
                    elif song_name is None:
                        service.set_draft_song_name(user_id, message.text)
                        service.create_song(user_id)

                        create_tracks_menu(user_id, True)

            except Exception as e:
                print(repr(e))


    bot.polling()
