import telebot
from telebot import types

import config
import service

START = "start"
MENU = "menu"
TRACKS = "tracks"
PLAYLISTS = "playlists"
HELP = "help"
ADD_TRACK = "add_track"
GET_TRACKS_LIST = "get_tracks_list"

GO_BACK = "back_page"
GO_NEXT = "next_page"

TRACK = "track"
PLAYLIST = "playlist"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def create_navigation(current_page, pages_count, keyboard, next_text, back_text):
    # –î–æ–±–∞–≤–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∫–Ω–æ–ø–∫–∏ –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥
    # –ï—Å–ª–∏ —É –Ω–∞—Å –≤—Å–µ–≥–æ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å 0 –∞—É–¥–∏–æ)
    if pages_count == 0 or pages_count == 1:
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è", callback_data="inactive")
        next_button = types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="inactive")
        number_package_page = types.InlineKeyboardButton(f"{1}/{1}",
                                                         callback_data="number_page")

    # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ, —á–µ–º 1
    else:
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"{back_text}")
        next_button = types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"{next_text}")
        number_package_page = types.InlineKeyboardButton(f"{current_page + 1}/{pages_count}",
                                                         callback_data="number_page")

    keyboard.row(back_button, number_package_page, next_button)


def create_songs_page(user_id, current_page):
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    record_on_page = 8

    songs, total_page_count = service.get_songs(user_id, current_page, record_on_page)

    page_text = "üëá–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤üëá"

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for song in songs:
        song_id = song[0]
        song_name = song[1]

        # –ü—Ä–∏—Å–≤–æ–∏–º –∏–º—è –∫–Ω–æ–ø–∫–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ–µ –Ω–∞–∂–∞—Ç–∏—è
        button_callback_data = TRACK + "_" + str(song_id)
        button = types.InlineKeyboardButton(song_name, callback_data=button_callback_data)

        keyboard.add(button)

    # –î–æ–±–∞–≤–∏–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    create_navigation(current_page, total_page_count, keyboard, "next_page", "back_page")

    # –°–æ–∑–¥–∞–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–µ–∫–æ–≤
    message_id = service.get_bot_message_id(user_id)
    bot.edit_message_text(chat_id=user_id, text=page_text, message_id=message_id, reply_markup=keyboard,
                          parse_mode='html')


# TODO
def create_playlists_page(user_id, current_page):
    xx = 0


def process_add_track(user_id):
    service.set_start_song_draft(user_id, True)

    # –£–¥–∞–ª—è–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Å—Ç–∞–ª–∞—Å—å
    message_id = service.get_bot_message_id(user_id)
    if message_id is not None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å –∏ –Ω–µ –Ω–∞–¥–æ
        try:
            bot.delete_message(chat_id=user_id, message_id=message_id)
        except Exception as e:
            print(repr(e))

    text = "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É"
    bot.send_message(user_id, text, parse_mode='html')


def process_tracks(user_id, resend):
    page_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É"
    message_id = service.get_bot_message_id(user_id)

    # –°–æ–∑–¥–∞–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = types.InlineKeyboardMarkup()
    add_track = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫", callback_data=ADD_TRACK)
    get_tracks_list = types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤", callback_data=GET_TRACKS_LIST)
    keyboard.add(add_track)
    keyboard.add(get_tracks_list)

    if resend:
        message = bot.send_message(chat_id=user_id, text=page_text, reply_markup=keyboard, parse_mode='html')
        service.set_bot_message_id(user_id, message.id)
    else:
        # –ë–æ—Ç –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        bot.edit_message_text(chat_id=user_id, text=page_text,
                              message_id=message_id,
                              reply_markup=keyboard, parse_mode='html')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
def create_menu_page(user_id):
    # –¢–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    menu_text = "\n\nüëá –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ üëá"

    # –£–¥–∞–ª—è–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Å—Ç–∞–ª–∞—Å—å
    message_id = service.get_bot_message_id(user_id)
    if message_id is not None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å –∏ –Ω–µ –Ω–∞–¥–æ
        try:
            bot.delete_message(chat_id=user_id, message_id=message_id)
        except Exception as e:
            print(repr(e))

    service.set_start_song_draft(user_id, False)

    # –°–æ–∑–¥–∞–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    markup = types.InlineKeyboardMarkup(row_width=2)
    package = types.InlineKeyboardButton("–¢—Ä–µ–∫–∏", callback_data=TRACKS)
    catalog = types.InlineKeyboardButton("–ü–ª–µ–π–ª–∏—Å—Ç—ã", callback_data=PLAYLISTS)
    help_item = types.InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data=HELP)
    markup.add(package)
    markup.add(catalog)
    markup.add(help_item)

    # –î–æ–±–∞–≤–ª—è–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    message = bot.send_message(user_id, menu_text, parse_mode='html', reply_markup=markup)
    service.set_bot_message_id(user_id, message.id)


if __name__ == '__main__':
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —Ç–µ–ª–µ–≥—Ä–∞–º —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    bot = telebot.TeleBot(config.TOKEN)


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /menu
    @bot.message_handler(commands=[START, MENU])
    def start(message):
        user_id = message.from_user.id

        # –û—Ç—Å—ã–ª–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        create_menu_page(user_id)


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    @bot.message_handler(commands=[HELP])
    def handle_start(message):
        user_id = message.from_user.id


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
    @bot.callback_query_handler(func=lambda call: True)
    def callback_handler(call):
        try:
            if call.message:
                user_id = call.from_user.id

                if call.data == TRACKS:
                    process_tracks(user_id, False)

                # TODO
                elif call.data == PLAYLISTS:
                    xx = 0

                elif call.data == ADD_TRACK:
                    process_add_track(user_id)

                elif call.data == GET_TRACKS_LIST:
                    service.set_current_page(user_id, 0, TRACKS)
                    create_songs_page(user_id, 0)

                elif call.data == GO_BACK or call.data == GO_NEXT:
                    previous_page, page_type = service.get_current_page(user_id)

                    # –í—ã–±–µ—Ä–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è(+1 -> —Å–ª–µ–¥—É—é—â–∞—è, -1 -> –ø—Ä–µ–¥—ã–¥—É—â–∞—è)
                    next_back_index = 1 if call.data == GO_NEXT else -1

                    current_page = previous_page + next_back_index

                    # –í—ã—á–∏—Å–ª–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    total_page_count = service.get_total_page_tracks(user_id)
                    if current_page < 0:
                        current_page = total_page_count - 1
                    elif current_page > total_page_count - 1:
                        current_page = 0

                    service.set_current_page(user_id, current_page, page_type)

                    # –ï—Å–ª–∏ –º—ã —Å–µ–π—á–∞—Å –ª–∏—Å—Ç–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¢—Ä–µ–∫–æ–≤
                    if page_type == TRACKS:
                        # –í—ã—à–ª–µ–º —Å–ª–µ–¥—É—é—â—É—é/–ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        create_songs_page(user_id, current_page)

                    # –ï—Å–ª–∏ –º—ã —Å–µ–π—á–∞—Å –ª–∏—Å—Ç–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ü–ª–µ–π–ª–∏—Å—Ç–æ–≤
                    elif page_type == PLAYLISTS:
                        # –í—ã—à–ª–µ–º —Å–ª–µ–¥—É—é—â—É—é/–ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        create_playlists_page(user_id, current_page)

                # TODO
                elif call.data.split("_")[0] == TRACK:
                    track_id = int(call.data.split("_")[1])
                    xx = 0

                # TODO
                elif call.data.split("_")[0] == PLAYLIST:
                    playlist_id = int(call.data.split("_")[1])

                # TODO - —á–µ—Ç –µ—â–µ
                else:
                    xx = 0

        except Exception as e:
            print(repr(e))


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    @bot.message_handler(content_types=['text'])
    def message_from_bot(message):
        if message.chat.type == "private":
            user_id = message.from_user.id

            try:
                if service.is_user_starting_draft(user_id):
                    song_link, song_performer, song_name = service.get_user_song_draft(user_id)
                    if song_link is None:
                        service.set_draft_song_link(user_id, message.text)
                        text = "–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞"
                        bot.send_message(user_id, text, parse_mode='html')
                    elif song_performer is None:
                        service.set_draft_song_performer(user_id, message.text)
                        text = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç—Ä–µ–∫–∞"
                        bot.send_message(user_id, text, parse_mode='html')
                    elif song_name is None:
                        service.set_draft_song_name(user_id, message.text)
                        service.create_song(user_id)

                        process_tracks(user_id, True)

            except Exception as e:
                print(repr(e))


    bot.polling()
