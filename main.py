from typing import Type

import sqlalchemy
import telebot
from telebot import types
from re import match, search

import config
import services
from models import Base, SongDraft

import service2

START = "start"
MENU = "menu"
TRACKS = "tracks"
PLAYLISTS = "playlists"
HELP = "help"
ADD_TRACK = "add_track"
GET_TRACKS_LIST = "get_tracks_list"

BACK_PAGE = "back_page"
NEXT_PAGE = "next_page"

TRACK = "track"
PLAYLIST = "playlist"

ADD_PLAYLIST = "add_playlist"
GET_PLAYLISTS_LIST = "get_playlists_list"

CHANGE_TRACK = "change_track"
DELETE_TRACK = "delete_track"

GO_BACK = "go_back"

ADD_TRACK_TO_PLAYLIST = "add_track_to_playlist"
ADD_MEMBER = "add_member"
DELETE_PLAYLIST = "delete_playlist"

END_CHANGE_PLAYLIST = "end_change_playlist"


def send_song_info_message(user_id, track_id):
    song_name, song_performer, song_link = service.get_song(track_id)
    track_info = f"üëá\n‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {song_name}\n‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {song_performer}\n‚Ä¢ –°—Å—ã–ª–∫–∞: {song_link}"

    keyboard = types.InlineKeyboardMarkup()
    change_track = types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=CHANGE_TRACK)
    delete_track = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"DELETE_TRACK_{track_id}")
    keyboard.row(change_track, delete_track)

    # –°–æ–∑–¥–∞–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ —Ç—Ä–µ–∫—É
    message_id = service.get_bot_message_id(user_id)
    bot.edit_message_text(chat_id=user_id, text=track_info, message_id=message_id, reply_markup=keyboard,
                          parse_mode='html')


def add_track_to_playlist(user_id, track_id):
    playlist_id = service2.get_playlist_id(user_id)
    service2.save_song_to_playlist(track_id, playlist_id)
    song_name, song_performer, song_link = service.get_song(track_id)
    track_info = f"–¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {song_name}\n‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {song_performer}\n‚Ä¢ –°—Å—ã–ª–∫–∞: {song_link}"

    # –°–æ–∑–¥–∞–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ —Ç—Ä–µ–∫—É
    bot.send_message(chat_id=user_id, text=track_info, parse_mode='html')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def create_navigation(current_page, pages_count, keyboard, next_text, back_text):
    # –î–æ–±–∞–≤–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∫–Ω–æ–ø–∫–∏ –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥
    # –ï—Å–ª–∏ —É –Ω–∞—Å –≤—Å–µ–≥–æ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å 0 –∞—É–¥–∏–æ)
    if pages_count == 0 or pages_count == 1:
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è", callback_data="inactive")
        next_button = types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="inactive")
        number_package_page = types.InlineKeyboardButton(f"{1}/{1}",
                                                         callback_data="number_page")

    # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ, —á–µ–º 1
    else:
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"{back_text}")
        next_button = types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"{next_text}")
        number_package_page = types.InlineKeyboardButton(f"{current_page + 1}/{pages_count}",
                                                         callback_data="number_page")

    keyboard.row(back_button, number_package_page, next_button)


def create_songs_page(user_id, current_page):
    playlist_id = service2.get_playlist_id(user_id)

    if service2.is_user_change_playlist(user_id) or playlist_id is None:
        songs, total_page_count = service.get_songs(user_id, current_page, config.PAGE_SIZE)
    else:
        songs, total_page_count = service2.get_playlist_songs(user_id, current_page, config.PAGE_SIZE)

    page_text = "üëá–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤üëá"

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for song in songs:
        song_split = song.split(": ")
        song_id = song_split[0]
        song_name = song_split[1]

        # –ü—Ä–∏—Å–≤–æ–∏–º –∏–º—è –∫–Ω–æ–ø–∫–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ–µ –Ω–∞–∂–∞—Ç–∏—è
        button_callback_data = TRACK + "_" + song_id
        button = types.InlineKeyboardButton(song_name, callback_data=button_callback_data)

        keyboard.add(button)

    # –î–æ–±–∞–≤–∏–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    create_navigation(current_page, total_page_count, keyboard, "next_page", "back_page")

    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–ª–µ–π–ª–∏—Å—Ç, —Ç–æ –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if service2.is_user_change_playlist(user_id):
        end_change = types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", callback_data=END_CHANGE_PLAYLIST)
        keyboard.add(end_change)

    # –°–æ–∑–¥–∞–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–µ–∫–æ–≤
    message_id = service.get_bot_message_id(user_id)
    bot.edit_message_text(chat_id=user_id, text=page_text, message_id=message_id, reply_markup=keyboard,
                          parse_mode='html')


def create_playlists_page(user_id, current_page):
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    record_on_page = 8

    playlists, total_page_count = service2.get_playlists(user_id, current_page, record_on_page)

    page_text = "üëá–°–ø–∏—Å–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤üëá"

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for playlist in playlists:
        playlist_id = playlist[0]
        playlist_name = playlist[1]

        # –ü—Ä–∏—Å–≤–æ–∏–º –∏–º—è –∫–Ω–æ–ø–∫–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ–µ –Ω–∞–∂–∞—Ç–∏—è
        button_callback_data = PLAYLIST + "_" + str(playlist_id)
        button = types.InlineKeyboardButton(playlist_name, callback_data=button_callback_data)

        keyboard.add(button)

    # –î–æ–±–∞–≤–∏–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    create_navigation(current_page, total_page_count, keyboard, "next_page", "back_page")

    # –°–æ–∑–¥–∞–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–µ–∫–æ–≤
    message_id = service.get_bot_message_id(user_id)
    bot.edit_message_text(chat_id=user_id, text=page_text, message_id=message_id, reply_markup=keyboard,
                          parse_mode='html')


def create_playlist_page(user_id, playlist_id):
    playlist_name = service2.get_playlist_name(playlist_id)
    page_text = f"{playlist_name}"

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    tracks_list = types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤", callback_data=GET_TRACKS_LIST)
    add_track = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏", callback_data=ADD_TRACK_TO_PLAYLIST)
    add_member = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=ADD_MEMBER)
    delete_playlist = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=DELETE_PLAYLIST)
    keyboard.add(tracks_list)
    keyboard.add(add_track)
    keyboard.add(add_member)
    keyboard.add(delete_playlist)

    # –°–æ–∑–¥–∞–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–µ–∫–æ–≤
    message_id = service.get_bot_message_id(user_id)
    bot.edit_message_text(chat_id=user_id, text=page_text, message_id=message_id, reply_markup=keyboard,
                          parse_mode='html')


def process_add_track_playlist(user_id, is_track):
    if is_track:
        text = "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É"
        service.set_start_song_draft(user_id, True)
    else:
        text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"
        service2.set_start_playlist_draft(user_id, True)

    # –£–¥–∞–ª—è–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Å—Ç–∞–ª–∞—Å—å
    message_id = service.get_bot_message_id(user_id)
    if message_id is not None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å –∏ –Ω–µ –Ω–∞–¥–æ
        try:
            bot.delete_message(chat_id=user_id, message_id=message_id)
        except Exception as e:
            print(repr(e))

    text = "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É"
    bot.send_message(user_id, text, parse_mode='html')


def process_tracks_playlists(user_id, resend, is_tracks):
    page_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É"
    message_id = service.get_bot_message_id(user_id)

    if is_tracks:
        add_callback = ADD_TRACK
        get_callback = GET_TRACKS_LIST
        add_button_text = "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫"
        get_list__button_text = "–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤"
    else:
        add_callback = ADD_PLAYLIST
        get_callback = GET_PLAYLISTS_LIST
        add_button_text = "–î–æ–±–∞–≤–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç"
        get_list__button_text = "–°–ø–∏—Å–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"

    # –°–æ–∑–¥–∞–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = types.InlineKeyboardMarkup()
    add_button = types.InlineKeyboardButton(add_button_text, callback_data=add_callback)
    get_list_button = types.InlineKeyboardButton(get_list__button_text, callback_data=get_callback)
    keyboard.add(add_button)
    keyboard.add(get_list_button)

    if resend:
        message = bot.send_message(chat_id=user_id, text=page_text, reply_markup=keyboard, parse_mode='html')
        service.set_bot_message_id(user_id, message.id)
    else:
        # –ë–æ—Ç –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        bot.edit_message_text(chat_id=user_id, text=page_text,
                              message_id=message_id,
                              reply_markup=keyboard, parse_mode='html')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
def create_menu_page(user_id):
    # –¢–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    menu_text = "\n\nüëá –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ üëá"

    # –£–¥–∞–ª—è–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Å—Ç–∞–ª–∞—Å—å
    message_id = service.get_bot_message_id(user_id)
    if message_id is not None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å –∏ –Ω–µ –Ω–∞–¥–æ
        try:
            bot.delete_message(chat_id=user_id, message_id=message_id)
        except Exception as e:
            print(repr(e))

    service.set_start_song_draft(user_id, False)

    # –°–æ–∑–¥–∞–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    markup = types.InlineKeyboardMarkup(row_width=2)
    package = types.InlineKeyboardButton("–¢—Ä–µ–∫–∏", callback_data=TRACKS)
    catalog = types.InlineKeyboardButton("–ü–ª–µ–π–ª–∏—Å—Ç—ã", callback_data=PLAYLISTS)
    help_item = types.InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data=HELP)
    markup.add(package)
    markup.add(catalog)
    markup.add(help_item)

    # –î–æ–±–∞–≤–ª—è–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    message = bot.send_message(user_id, menu_text, parse_mode='html', reply_markup=markup)
    service.set_bot_message_id(user_id, message.id)


if __name__ == '__main__':
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —Ç–µ–ª–µ–≥—Ä–∞–º —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    bot = telebot.TeleBot(config.TOKEN)
    engine = sqlalchemy.create_engine(config.DB_CONN_STRING, echo=True)
    Base.metadata.create_all(engine)
    service = services.UserService(engine)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /menu
    @bot.message_handler(commands=[START, MENU])
    def start(message):
        user_id = message.from_user.id

        # –û—Ç—Å—ã–ª–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        create_menu_page(user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    @bot.message_handler(commands=[HELP])
    def handle_start(message):
        user_id = message.from_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
    @bot.callback_query_handler(func=lambda call: True)
    def callback_handler(call):
        try:
            if not call.message:
                return

            user_id = call.from_user.id

            if call.data == TRACKS:
                service2.set_playlist_id(user_id, None)
                process_tracks_playlists(user_id, False, True)

            elif call.data == PLAYLISTS:
                process_tracks_playlists(user_id, False, False)

            elif call.data == ADD_TRACK:
                process_add_track_playlist(user_id, True)

            elif call.data == GET_TRACKS_LIST:
                service.set_current_page(user_id, 0, TRACKS)
                create_songs_page(user_id, 0)

            # TODO - –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è"
            elif call.data == GO_BACK:
                xx = 0

            elif call.data == BACK_PAGE or call.data == NEXT_PAGE:
                previous_page, page_type = service.get_current_page(user_id)

                # –í—ã–±–µ—Ä–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è(+1 -> —Å–ª–µ–¥—É—é—â–∞—è, -1 -> –ø—Ä–µ–¥—ã–¥—É—â–∞—è)
                next_back_index = 1 if call.data == NEXT_PAGE else -1

                current_page = previous_page + next_back_index

                # –í—ã—á–∏—Å–ª–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                # TODO - –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å get_total_page_tracks –Ω–∞ get_total_page_count —Å —É—á–µ—Ç–æ–º page_type
                if page_type == TRACKS:
                    total_page_count = service.get_total_page_tracks(user_id)
                    if current_page < 0:
                        current_page = total_page_count - 1
                    elif current_page > total_page_count - 1:
                        current_page = 0
                else:
                    total_page_count = service2.get_total_page_count(user_id, page_type)
                    if current_page < 0:
                        current_page = total_page_count - 1
                    elif current_page > total_page_count - 1:
                        current_page = 0

                service.set_current_page(user_id, current_page, page_type)

                # –ï—Å–ª–∏ –º—ã —Å–µ–π—á–∞—Å –ª–∏—Å—Ç–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¢—Ä–µ–∫–æ–≤
                if page_type == TRACKS:
                    # –í—ã—à–ª–µ–º —Å–ª–µ–¥—É—é—â—É—é/–ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    create_songs_page(user_id, current_page)

                # –ï—Å–ª–∏ –º—ã —Å–µ–π—á–∞—Å –ª–∏—Å—Ç–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ü–ª–µ–π–ª–∏—Å—Ç–æ–≤
                elif page_type == PLAYLISTS:
                    # –í—ã—à–ª–µ–º —Å–ª–µ–¥—É—é—â—É—é/–ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    create_playlists_page(user_id, current_page)

            elif call.data.split("_")[0] == TRACK:
                track_id = call.data.split("_")[1]
                if service2.is_user_change_playlist(user_id):
                    add_track_to_playlist(user_id, track_id)
                else:
                    send_song_info_message(user_id, track_id)

            elif call.data.split("_")[0] == PLAYLIST:
                playlist_id = call.data.split("_")[1]
                service2.set_playlist_id(user_id, playlist_id)

                create_playlist_page(user_id, playlist_id)

            elif call.data == ADD_PLAYLIST:
                process_add_track_playlist(user_id, False)

            elif call.data == GET_PLAYLISTS_LIST:
                service.set_current_page(user_id, 0, PLAYLISTS)
                create_playlists_page(user_id, 0)

            elif call.data == ADD_TRACK_TO_PLAYLIST:
                service2.set_user_change_playlist(user_id, True)

                service.set_current_page(user_id, 0, TRACKS)
                create_songs_page(user_id, 0)

            elif call.data == END_CHANGE_PLAYLIST:
                service2.set_user_change_playlist(user_id, False)
                playlist_id = service2.get_playlist_id(user_id)
                create_playlist_page(user_id, playlist_id)

            # TODO
            elif call.data == CHANGE_TRACK:
                xx = 0
            
            elif match(rf"^{DELETE_TRACK}_*$", call.data) is None:
                # –ù–∞—Ö–æ–¥–∏–º song_id
                find_song_id = search(r"DELETE_TRACK_(.*)", call.data)
                assert find_song_id is not None
                song_id = find_song_id.group(1)

                print(song_id)
                name, _, _ = service.get_song(song_id)
                # –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–∫
                service.delete_song(song_id)

                # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                text = f"‚úÖ –¢—Ä–µ–∫ {name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω"
                bot.send_message(chat_id=user_id, text=text, parse_mode='html')

                # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–µ–∫–æ–≤
                create_songs_page(user_id, 0)
            elif call.data == ADD_MEMBER:
                xx = 0
            elif call.data == DELETE_PLAYLIST:
                xx = 0

            # TODO - —á–µ—Ç –µ—â–µ
            else:
                xx = 0

        except Exception as e:
            print(repr(e))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    @bot.message_handler(content_types=['text'])
    def message_from_bot(message):
        if message.chat.type == "private":
            user_id = message.from_user.id

            try:
                if service.is_user_starting_song_draft(user_id):
                    sd: Type[SongDraft] = service.get_user_song_draft(user_id)
                    if sd.link is None:
                        service.set_draft_song_link(user_id, message.text)
                        text = "–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞"
                        bot.send_message(user_id, text, parse_mode='html')
                    elif sd.performer is None:
                        service.set_draft_song_performer(user_id, message.text)
                        text = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç—Ä–µ–∫–∞"
                        bot.send_message(user_id, text, parse_mode='html')
                    elif sd.name is None:
                        service.set_draft_song_name(user_id, message.text)
                        service.create_song(user_id)
                        process_tracks_playlists(user_id, True, True)

                elif service2.is_user_starting_playlist_draft(user_id):
                    playlist_name = service2.get_user_playlist_draft(user_id)
                    if playlist_name is None:
                        service2.set_draft_playlist_name(user_id, message.text)
                        service2.create_playlist(user_id)

                        process_tracks_playlists(user_id, True, False)

            except Exception as e:
                print(repr(e))


    bot.polling()
